<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(370,690)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="label" val="X_VHDL"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(370,710)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="label" val="Y_VHDL"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(370,730)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="label" val="Z_VHDL"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(490,200)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="label" val="X"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(50,130)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="A"/>
    </comp>
    <comp lib="0" loc="(50,170)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="B"/>
    </comp>
    <comp lib="0" loc="(50,240)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="C"/>
    </comp>
    <comp lib="0" loc="(50,280)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="label" val="D"/>
    </comp>
    <comp lib="0" loc="(520,560)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="label" val="Z"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(530,400)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="label" val="Y"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="1" loc="(250,480)" name="NOT Gate"/>
    <comp lib="1" loc="(250,510)" name="NOT Gate"/>
    <comp lib="1" loc="(250,550)" name="NOT Gate"/>
    <comp lib="1" loc="(290,360)" name="NOT Gate"/>
    <comp lib="1" loc="(290,400)" name="NOT Gate"/>
    <comp lib="1" loc="(310,260)" name="AND Gate"/>
    <comp lib="1" loc="(320,150)" name="NOR Gate"/>
    <comp lib="1" loc="(350,480)" name="AND Gate">
      <a name="inputs" val="3"/>
      <a name="label" val="AND_1"/>
    </comp>
    <comp lib="1" loc="(350,560)" name="AND Gate">
      <a name="inputs" val="3"/>
      <a name="label" val="AND_2"/>
    </comp>
    <comp lib="1" loc="(350,620)" name="AND Gate">
      <a name="inputs" val="3"/>
      <a name="label" val="AND_3"/>
    </comp>
    <comp lib="1" loc="(370,380)" name="OR Gate">
      <a name="label" val="OR_1"/>
    </comp>
    <comp lib="1" loc="(440,380)" name="NOT Gate"/>
    <comp lib="1" loc="(460,200)" name="AND Gate"/>
    <comp lib="1" loc="(480,560)" name="OR Gate">
      <a name="inputs" val="3"/>
    </comp>
    <comp lib="1" loc="(510,400)" name="AND Gate">
      <a name="inputs" val="3"/>
    </comp>
    <comp loc="(370,690)" name="p2ex2">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(110,170)" to="(110,710)"/>
    <wire from="(110,170)" to="(200,170)"/>
    <wire from="(110,710)" to="(150,710)"/>
    <wire from="(130,130)" to="(130,690)"/>
    <wire from="(130,130)" to="(210,130)"/>
    <wire from="(130,690)" to="(150,690)"/>
    <wire from="(170,280)" to="(170,640)"/>
    <wire from="(170,280)" to="(260,280)"/>
    <wire from="(170,640)" to="(300,640)"/>
    <wire from="(180,460)" to="(180,600)"/>
    <wire from="(180,460)" to="(260,460)"/>
    <wire from="(180,600)" to="(300,600)"/>
    <wire from="(190,240)" to="(190,550)"/>
    <wire from="(190,240)" to="(230,240)"/>
    <wire from="(190,550)" to="(220,550)"/>
    <wire from="(200,170)" to="(200,510)"/>
    <wire from="(200,170)" to="(240,170)"/>
    <wire from="(200,510)" to="(220,510)"/>
    <wire from="(210,130)" to="(210,480)"/>
    <wire from="(210,130)" to="(250,130)"/>
    <wire from="(210,480)" to="(210,530)"/>
    <wire from="(210,480)" to="(220,480)"/>
    <wire from="(210,530)" to="(260,530)"/>
    <wire from="(230,240)" to="(230,430)"/>
    <wire from="(230,240)" to="(260,240)"/>
    <wire from="(230,430)" to="(430,430)"/>
    <wire from="(240,170)" to="(240,400)"/>
    <wire from="(240,170)" to="(260,170)"/>
    <wire from="(240,400)" to="(240,420)"/>
    <wire from="(240,400)" to="(260,400)"/>
    <wire from="(240,420)" to="(420,420)"/>
    <wire from="(250,130)" to="(250,360)"/>
    <wire from="(250,130)" to="(260,130)"/>
    <wire from="(250,360)" to="(260,360)"/>
    <wire from="(250,480)" to="(260,480)"/>
    <wire from="(250,510)" to="(270,510)"/>
    <wire from="(250,550)" to="(290,550)"/>
    <wire from="(260,460)" to="(260,480)"/>
    <wire from="(260,460)" to="(300,460)"/>
    <wire from="(260,530)" to="(260,540)"/>
    <wire from="(260,540)" to="(300,540)"/>
    <wire from="(270,480)" to="(270,510)"/>
    <wire from="(270,480)" to="(300,480)"/>
    <wire from="(270,510)" to="(270,560)"/>
    <wire from="(270,560)" to="(270,620)"/>
    <wire from="(270,560)" to="(300,560)"/>
    <wire from="(270,620)" to="(300,620)"/>
    <wire from="(290,360)" to="(320,360)"/>
    <wire from="(290,400)" to="(320,400)"/>
    <wire from="(290,500)" to="(290,550)"/>
    <wire from="(290,500)" to="(300,500)"/>
    <wire from="(290,550)" to="(290,580)"/>
    <wire from="(290,580)" to="(300,580)"/>
    <wire from="(310,260)" to="(360,260)"/>
    <wire from="(320,150)" to="(360,150)"/>
    <wire from="(350,480)" to="(370,480)"/>
    <wire from="(350,560)" to="(430,560)"/>
    <wire from="(350,620)" to="(370,620)"/>
    <wire from="(360,150)" to="(360,180)"/>
    <wire from="(360,180)" to="(410,180)"/>
    <wire from="(360,220)" to="(360,260)"/>
    <wire from="(360,220)" to="(410,220)"/>
    <wire from="(370,380)" to="(410,380)"/>
    <wire from="(370,480)" to="(370,540)"/>
    <wire from="(370,540)" to="(430,540)"/>
    <wire from="(370,580)" to="(370,620)"/>
    <wire from="(370,580)" to="(430,580)"/>
    <wire from="(420,400)" to="(420,420)"/>
    <wire from="(420,400)" to="(460,400)"/>
    <wire from="(430,420)" to="(430,430)"/>
    <wire from="(430,420)" to="(460,420)"/>
    <wire from="(440,380)" to="(460,380)"/>
    <wire from="(460,200)" to="(490,200)"/>
    <wire from="(480,560)" to="(520,560)"/>
    <wire from="(50,130)" to="(130,130)"/>
    <wire from="(50,170)" to="(110,170)"/>
    <wire from="(50,240)" to="(90,240)"/>
    <wire from="(50,280)" to="(70,280)"/>
    <wire from="(510,400)" to="(530,400)"/>
    <wire from="(70,280)" to="(170,280)"/>
    <wire from="(70,280)" to="(70,750)"/>
    <wire from="(70,750)" to="(150,750)"/>
    <wire from="(90,240)" to="(190,240)"/>
    <wire from="(90,240)" to="(90,730)"/>
    <wire from="(90,730)" to="(150,730)"/>
  </circuit>
  <vhdl name="p2ex2">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY p2ex2 IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    A        : IN  std_logic; -- input bit example&#13;
    B        : IN  std_logic; -- input bit example&#13;
    C        : IN  std_logic; -- input bit example
    D        : IN  std_logic; -- input bit example
  ------------------------------------------------------------------------------&#13;
  --Insert output ports below&#13;
    X        : OUT std_logic; -- output bit example&#13;
    Y        : OUT std_logic; -- output bit example&#13;
    Z        : OUT std_logic  -- output bit example
    );&#13;
END p2ex2;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF p2ex2 IS&#13;
&#13;SIGNAL OR_1, AND_1, AND_2, AND_3: std_logic;
BEGIN&#13;
	OR_1 &lt;= not A or not B;
	AND_1 &lt;= not A and not B and not C;
	AND_2 &lt;= A and not B and not C;
	AND_3 &lt;= not A and not B and D;
&#13;	X &lt;= (A nor B) and (C and D);
	Y &lt;= not OR_1 and B and C;
	Z &lt;= AND_1 or AND_2 or AND_3;&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
